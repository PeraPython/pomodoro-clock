{"version":3,"sources":["components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isCounting","timer","breaks","session","endSession","startStop","bind","assertThisInitialized","increaseDecrease","resetAll","i","document","getElementsByClassName","style","pointerEvents","x","getElementById","pause","currentTime","setState","info","type","value","clock","setInterval","minutes","parseInt","_this2","split","seconds","play","newTime","clearInterval","_this3","react_default","a","createElement","className","id","onClick","src","Component","App","components_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f22096c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './clock.css';\n\nclass Clock extends Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            isCounting: false,\n            timer: \"25:00\",\n            breaks: 5,\n            session: 25,\n            endSession: false\n        }\n        this.startStop = this.startStop.bind(this);\n        this.increaseDecrease = this.increaseDecrease.bind(this);\n        this.resetAll = this.resetAll.bind(this);\n    }\n    componentDidUpdate(){\n        // disable click event on increase/decrease elements while clock is runing \n        for(let i=0; i<4; i++){\n            this.state.isCounting ? \n                document.getElementsByClassName(\"btn\")[i].style.pointerEvents = 'none': \n                document.getElementsByClassName(\"btn\")[i].style.pointerEvents = 'auto';\n\n        }    \n    }\n\n    resetAll(){\n        const x = document.getElementById(\"beep\");\n        x.pause();\n        x.currentTime = 0;\n        this.setState({ breaks: 5, session: 25, isCounting: false, timer: \"25:00\", endSession: false })\n    }\n\n    increaseDecrease(info){\n        const type = info[0];\n        const value = info[1];\n        // Prevents values > 60 and < 1\n        if((this.state[type] === 1 && value === \"dec\") || (this.state[type] === 60 && value === \"inc\")){\n            return;\n        }\n        // Updates session, break and timer \n        if(value === \"dec\"){ \n            if(type === \"session\"){\n                const timer = this.state.session < 10 ? \"0\"+(this.state.session-1)+\":00\" : (this.state.session-1)+\":00\";\n                this.setState({ session: this.state.session-1, timer });\n            } else{\n                this.setState({ breaks: this.state.breaks-1 });\n            }\n        } else{\n            if(type === \"session\"){\n                const timer = this.state.session < 10 ? \"0\"+(this.state.session+1)+\":00\" : (this.state.session+1)+\":00\";\n                this.setState({ session: this.state.session+1, timer });\n            } else{\n                this.setState({ breaks: this.state.breaks+1 });\n            }\n        }\n    }\n\n    async startStop(){\n        //first toggle isCounting\n        await this.setState({ isCounting: !this.state.isCounting });\n        const x = document.getElementById(\"beep\");\n        const clock = setInterval(() => {\n            let minutes = parseInt(this.state.timer.split(\":\")[0]);\n            let seconds = parseInt(this.state.timer.split(\":\")[1]);\n            //stops clock if user clicks on #start_stop\n            if(!this.state.isCounting){\n                clearInterval(clock);\n                return;\n            }\n            //toggle between session and break countdown\n            if(minutes === 0 && seconds === 0){\n                x.play();\n                this.setState({ endSession: !this.state.endSession });\n                if(this.state.endSession){\n                    const timer = this.state.breaks < 10 ? \"0\"+(this.state.breaks)+\":00\" : (this.state.breaks)+\":00\"\n                    this.setState({ timer })\n                } else{\n                    const timer = this.state.session < 10 ? \"0\"+(this.state.session)+\":00\" : (this.state.session)+\":00\"\n                    this.setState({ timer })\n                }\n            // countdown...\n            } else if(seconds === 0){\n                let newTime = minutes-1 < 10 ? \"0\"+(minutes-1) : minutes-1;\n                newTime += \":59\";  \n                this.setState({ timer: newTime });\n            } else{\n                let newTime = minutes < 10 ? \"0\"+minutes : minutes;\n                newTime += \":\";\n                newTime += seconds-1 < 10 ? \"0\"+(seconds-1): seconds-1;\n                this.setState({ timer: newTime });\n            }\n        }, 1000);\n    }\n\n    render(){\n        return(\n            <div className=\"wrapper\">\n                <div id=\"title\">Pomodoro Clock</div>\n                <div id=\"settings\">\n                    <div id=\"break\">\n                        <div id=\"break-label\">Break Length</div>\n                        <div className=\"options\">\n                            <div id=\"break-decrement\" className=\"btn\" onClick={() => this.increaseDecrease([\"breaks\", \"dec\"])}>\n                                <i className=\"fa fa-arrow-down fa-2x\"/>\n                            </div>\n                            <div id=\"break-length\">{this.state.breaks}</div>\n                            <div id=\"break-increment\" className=\"btn\" onClick={() => this.increaseDecrease([\"breaks\", \"inc\"])}>\n                                <i className=\"fa fa-arrow-up fa-2x\"/>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"session\">\n                        <div id=\"session-label\">Session Length</div>\n                        <div className=\"options\">\n                            <div id=\"session-decrement\" className=\"btn\" onClick={() => this.increaseDecrease([\"session\", \"dec\"])}>\n                                <i className=\"fa fa-arrow-down fa-2x\"/>\n                            </div>\n                            <div id=\"session-length\">{this.state.session}</div>\n                            <div id=\"session-increment\" className=\"btn\" onClick={() => this.increaseDecrease([\"session\", \"inc\"])}>\n                                <i className=\"fa fa-arrow-up fa-2x\"/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"display\">\n                    <div id=\"time-wrapper\">\n                        <div id=\"timer-label\">{this.state.endSession ? \"Break\" : \"Session\"}</div>\n                        <div id=\"time-left\">{this.state.timer}</div>\n                    </div>\n                    <div id=\"control-wrapper\">\n                        <div id=\"start_stop\" onClick={this.startStop}>{this.state.isCounting ? <i className=\"fas fa-pause\"></i> : <i className=\"fas fa-play\"></i>}</div>\n                        <div id=\"reset\" onClick={this.resetAll}><i className=\"fas fa-redo-alt\"></i></div>\n                    </div>\n                </div>\n                <audio id=\"beep\" src=\"http://soundbible.com/mp3/Rooster%20Crow-SoundBible.com-1802551702.mp3\"></audio>\n            </div>\n        )\n    }\n}\n\nexport default Clock;","import React, { Component } from 'react';\nimport Clock from './components/Clock';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Clock />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}